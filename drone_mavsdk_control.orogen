name "drone_mavsdk_control"
# Optionally declare the version number
# version "0.1"

# If new data types need to be defined, they have to be put in a separate C++
# header, and this header will be loaded here
import_types_from "drone_mavsdk_controlTypes.hpp"
import_types_from "drone_dji_sdk"
# Finally, it is pretty common that headers are directly loaded from an external
# library. In this case, the library must be first used (the name is the
# library's pkg-config name) and then the header can be used. Following Rock
# conventions, a common use-case would be:
#
using_library "mavsdk"
# import_types_from "mavsdk/mavsdk.h"

# If this project uses data types that are defined in other oroGen projects,
# these projects should be imported there as well.
import_types_from "std"
# import_types_from "base"

# Declare a new task context (i.e., a component)
#
# The corresponding C++ class can be edited in tasks/Task.hpp and
# tasks/Task.cpp, and will be put in the mavsdk namespace.
task_context "MavDroneControlTask" do
    # This is the default from now on, and should not be removed. Rock will
    # transition to a setup where all components use a configuration step.
    needs_configuration

    # Serial port that the drone is connected
    property "serial_port", "/std/string"

    # Baudrate
    property "baudrate", "uint32_t", 230_400

    # Takeoff expected altitude
    property "takeoff_altitude", "double", 1.2

    # Command sent to the drone
    input_port "cmd_input", "drone_dji_sdk/CommandAction"

    # An output port, i.e. an object to which the component pushes data so that
    # it is transmitted to other components' inputs
    #
    # Data can be written using _output.write(value). _output.connected() returns
    # if this output is connected to an input or not.
    output_port "output", "int"

    runtime_states :NOT_READY, :READY_TO_TAKE_OFF, :TAKING_OFF,
                   :IN_THE_AIR, :ON_MISSION, :PREPARE_LANDING,
                   :LANDING, :DISARMED

    # If you want that component's updateHook() to be executed when the "input"
    # port gets data, uncomment this and comment the 'periodic' line
    # port_driven "input"
    # By default, the task will be periodic with a period of 0.1
    periodic 0.1
end


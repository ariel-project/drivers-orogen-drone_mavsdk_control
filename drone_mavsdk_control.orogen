name "drone_mavsdk_control"

using_library "mavsdk"

import_types_from "std"
import_types_from "drone_mavsdk_controlTypes.hpp"
import_types_from "drone_dji_sdk"
import_types_from "gps_base"
import_types_from "power_base"
import_types_from "base"

# Declare a new task context (i.e., a component)
#
# The corresponding C++ class can be edited in tasks/Task.hpp and
# tasks/Task.cpp, and will be put in the mavsdk namespace.
task_context "MavDroneControlTask" do
    # This is the default from now on, and should not be removed. Rock will
    # transition to a setup where all components use a configuration step.
    needs_configuration

    # Serial port that the drone is connected
    property "address", "/std/string"

    # Command timeout in seconds
    property "timeout", "uint8_t"

    # Baudrate
    property "baudrate", "uint32_t", 230_400

    # Takeoff expected altitude
    property "takeoff_altitude", "double", 1.2

    property "utm_parameters", "gps_base/UTMConversionParameters"

    # Command sent to the drone
    input_port "cmd_input", "drone_dji_sdk/CommandAction"

    input_port "cmd_pos", "drone_dji_sdk/VehicleSetpoint"

    input_port "cmd_mission", "drone_dji_sdk/Mission"

    output_port "pose_samples", "base/samples/RigidBodyState"
    output_port "battery", "power_base/BatteryStatus"
    output_port "unit_health", "uint8_t"

    runtime_states :ON_THE_GROUND, :IN_THE_AIR

end

